# Generated by Django 5.2.1 on 2025-05-09 12:18

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genreName', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('spotifyUserId', models.CharField(max_length=100, unique=True)),
                ('displayName', models.CharField(max_length=100)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('lastUpdated', models.DateTimeField(auto_now=True)),
                ('curveballEnjoyment', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('spotifyMediaURI', models.CharField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('artistName', models.CharField(max_length=255)),
                ('albumName', models.CharField(max_length=255)),
                ('typeOfMedia', models.CharField(choices=[('song', 'Song'), ('album', 'Album')], max_length=10)),
                ('savedAt', models.DateTimeField()),
                ('genreName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.genre')),
            ],
        ),
        migrations.CreateModel(
            name='PreferenceVector',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('preferences', models.JSONField(default=dict)),
                ('genreName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.genre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('isLiked', models.BooleanField()),
                ('source', models.CharField(max_length=100)),
                ('feedbackAt', models.DateField()),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.media')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
